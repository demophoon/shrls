// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: shrls.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Shrls_GetShrl_FullMethodName    = "/shrls.Shrls/GetShrl"
	Shrls_GetShrls_FullMethodName   = "/shrls.Shrls/GetShrls"
	Shrls_ListShrls_FullMethodName  = "/shrls.Shrls/ListShrls"
	Shrls_PutShrl_FullMethodName    = "/shrls.Shrls/PutShrl"
	Shrls_PostShrl_FullMethodName   = "/shrls.Shrls/PostShrl"
	Shrls_DeleteShrl_FullMethodName = "/shrls.Shrls/DeleteShrl"
)

// ShrlsClient is the client API for Shrls service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShrlsClient interface {
	GetShrl(ctx context.Context, in *GetShrlRequest, opts ...grpc.CallOption) (*GetShrlResponse, error)
	GetShrls(ctx context.Context, in *GetShrlsRequest, opts ...grpc.CallOption) (*GetShrlsResponse, error)
	ListShrls(ctx context.Context, in *ListShrlsRequest, opts ...grpc.CallOption) (*ListShrlsResponse, error)
	PutShrl(ctx context.Context, in *PutShrlRequest, opts ...grpc.CallOption) (*PutShrlResponse, error)
	PostShrl(ctx context.Context, in *PostShrlRequest, opts ...grpc.CallOption) (*PostShrlResponse, error)
	DeleteShrl(ctx context.Context, in *DeleteShrlRequest, opts ...grpc.CallOption) (*DeleteShrlResponse, error)
}

type shrlsClient struct {
	cc grpc.ClientConnInterface
}

func NewShrlsClient(cc grpc.ClientConnInterface) ShrlsClient {
	return &shrlsClient{cc}
}

func (c *shrlsClient) GetShrl(ctx context.Context, in *GetShrlRequest, opts ...grpc.CallOption) (*GetShrlResponse, error) {
	out := new(GetShrlResponse)
	err := c.cc.Invoke(ctx, Shrls_GetShrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrlsClient) GetShrls(ctx context.Context, in *GetShrlsRequest, opts ...grpc.CallOption) (*GetShrlsResponse, error) {
	out := new(GetShrlsResponse)
	err := c.cc.Invoke(ctx, Shrls_GetShrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrlsClient) ListShrls(ctx context.Context, in *ListShrlsRequest, opts ...grpc.CallOption) (*ListShrlsResponse, error) {
	out := new(ListShrlsResponse)
	err := c.cc.Invoke(ctx, Shrls_ListShrls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrlsClient) PutShrl(ctx context.Context, in *PutShrlRequest, opts ...grpc.CallOption) (*PutShrlResponse, error) {
	out := new(PutShrlResponse)
	err := c.cc.Invoke(ctx, Shrls_PutShrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrlsClient) PostShrl(ctx context.Context, in *PostShrlRequest, opts ...grpc.CallOption) (*PostShrlResponse, error) {
	out := new(PostShrlResponse)
	err := c.cc.Invoke(ctx, Shrls_PostShrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shrlsClient) DeleteShrl(ctx context.Context, in *DeleteShrlRequest, opts ...grpc.CallOption) (*DeleteShrlResponse, error) {
	out := new(DeleteShrlResponse)
	err := c.cc.Invoke(ctx, Shrls_DeleteShrl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShrlsServer is the server API for Shrls service.
// All implementations should embed UnimplementedShrlsServer
// for forward compatibility
type ShrlsServer interface {
	GetShrl(context.Context, *GetShrlRequest) (*GetShrlResponse, error)
	GetShrls(context.Context, *GetShrlsRequest) (*GetShrlsResponse, error)
	ListShrls(context.Context, *ListShrlsRequest) (*ListShrlsResponse, error)
	PutShrl(context.Context, *PutShrlRequest) (*PutShrlResponse, error)
	PostShrl(context.Context, *PostShrlRequest) (*PostShrlResponse, error)
	DeleteShrl(context.Context, *DeleteShrlRequest) (*DeleteShrlResponse, error)
}

// UnimplementedShrlsServer should be embedded to have forward compatible implementations.
type UnimplementedShrlsServer struct {
}

func (UnimplementedShrlsServer) GetShrl(context.Context, *GetShrlRequest) (*GetShrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShrl not implemented")
}
func (UnimplementedShrlsServer) GetShrls(context.Context, *GetShrlsRequest) (*GetShrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShrls not implemented")
}
func (UnimplementedShrlsServer) ListShrls(context.Context, *ListShrlsRequest) (*ListShrlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShrls not implemented")
}
func (UnimplementedShrlsServer) PutShrl(context.Context, *PutShrlRequest) (*PutShrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutShrl not implemented")
}
func (UnimplementedShrlsServer) PostShrl(context.Context, *PostShrlRequest) (*PostShrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostShrl not implemented")
}
func (UnimplementedShrlsServer) DeleteShrl(context.Context, *DeleteShrlRequest) (*DeleteShrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShrl not implemented")
}

// UnsafeShrlsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShrlsServer will
// result in compilation errors.
type UnsafeShrlsServer interface {
	mustEmbedUnimplementedShrlsServer()
}

func RegisterShrlsServer(s grpc.ServiceRegistrar, srv ShrlsServer) {
	s.RegisterService(&Shrls_ServiceDesc, srv)
}

func _Shrls_GetShrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrlsServer).GetShrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrls_GetShrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrlsServer).GetShrl(ctx, req.(*GetShrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrls_GetShrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrlsServer).GetShrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrls_GetShrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrlsServer).GetShrls(ctx, req.(*GetShrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrls_ListShrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShrlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrlsServer).ListShrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrls_ListShrls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrlsServer).ListShrls(ctx, req.(*ListShrlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrls_PutShrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutShrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrlsServer).PutShrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrls_PutShrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrlsServer).PutShrl(ctx, req.(*PutShrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrls_PostShrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostShrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrlsServer).PostShrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrls_PostShrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrlsServer).PostShrl(ctx, req.(*PostShrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shrls_DeleteShrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShrlsServer).DeleteShrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shrls_DeleteShrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShrlsServer).DeleteShrl(ctx, req.(*DeleteShrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shrls_ServiceDesc is the grpc.ServiceDesc for Shrls service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shrls_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shrls.Shrls",
	HandlerType: (*ShrlsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShrl",
			Handler:    _Shrls_GetShrl_Handler,
		},
		{
			MethodName: "GetShrls",
			Handler:    _Shrls_GetShrls_Handler,
		},
		{
			MethodName: "ListShrls",
			Handler:    _Shrls_ListShrls_Handler,
		},
		{
			MethodName: "PutShrl",
			Handler:    _Shrls_PutShrl_Handler,
		},
		{
			MethodName: "PostShrl",
			Handler:    _Shrls_PostShrl_Handler,
		},
		{
			MethodName: "DeleteShrl",
			Handler:    _Shrls_DeleteShrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shrls.proto",
}

const (
	FileUpload_PostFileUpload_FullMethodName = "/shrls.FileUpload/PostFileUpload"
)

// FileUploadClient is the client API for FileUpload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileUploadClient interface {
	PostFileUpload(ctx context.Context, in *PostFileUploadRequest, opts ...grpc.CallOption) (*PostFileUploadResponse, error)
}

type fileUploadClient struct {
	cc grpc.ClientConnInterface
}

func NewFileUploadClient(cc grpc.ClientConnInterface) FileUploadClient {
	return &fileUploadClient{cc}
}

func (c *fileUploadClient) PostFileUpload(ctx context.Context, in *PostFileUploadRequest, opts ...grpc.CallOption) (*PostFileUploadResponse, error) {
	out := new(PostFileUploadResponse)
	err := c.cc.Invoke(ctx, FileUpload_PostFileUpload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileUploadServer is the server API for FileUpload service.
// All implementations should embed UnimplementedFileUploadServer
// for forward compatibility
type FileUploadServer interface {
	PostFileUpload(context.Context, *PostFileUploadRequest) (*PostFileUploadResponse, error)
}

// UnimplementedFileUploadServer should be embedded to have forward compatible implementations.
type UnimplementedFileUploadServer struct {
}

func (UnimplementedFileUploadServer) PostFileUpload(context.Context, *PostFileUploadRequest) (*PostFileUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostFileUpload not implemented")
}

// UnsafeFileUploadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileUploadServer will
// result in compilation errors.
type UnsafeFileUploadServer interface {
	mustEmbedUnimplementedFileUploadServer()
}

func RegisterFileUploadServer(s grpc.ServiceRegistrar, srv FileUploadServer) {
	s.RegisterService(&FileUpload_ServiceDesc, srv)
}

func _FileUpload_PostFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostFileUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileUploadServer).PostFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileUpload_PostFileUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileUploadServer).PostFileUpload(ctx, req.(*PostFileUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileUpload_ServiceDesc is the grpc.ServiceDesc for FileUpload service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileUpload_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shrls.FileUpload",
	HandlerType: (*FileUploadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostFileUpload",
			Handler:    _FileUpload_PostFileUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shrls.proto",
}
